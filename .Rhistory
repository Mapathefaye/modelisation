head(poules)
#| echo: true
# Afficher les informatons sur les variables
str(poules)
# résumé du jeu de données
summary(poules)
# résumé du jeu de données
summary(poules)
# Fonction pour calculer la proportion de valeurs manquantes par variable
proportion_valeurs_manquantes <- function(data) {
# Calcul du nombre de valeurs manquantes par colonne
nb_valeurs_manquantes <- sapply(data, function(x) sum(is.na(x)))
# Calcul de la proportion de valeurs manquantes
proportion_manquantes <- nb_valeurs_manquantes / nrow(data)
# Création d'un dataframe pour le résultat
resultat <- data.frame(Nombre = nb_valeurs_manquantes, Proportion = proportion_manquantes)
return(resultat)
}
# Utilisation de la fonction avec la base de données
resultat <- proportion_valeurs_manquantes(poules)
# Affichage du résultat
resultat
library(ggplot2)
# Identifier les colonnes quantitatives
vars_quantitatives <- sapply(poules, is.numeric)
# Créer un histogramme pour chaque variable quantitative
for (var in names(poules)[vars_quantitatives]) {
print(ggplot(poules, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
theme_minimal() +
labs(title = paste("Histogramme de", var), x = var, y = "Fréquence"))
}
library(ggplot2)
# Identifier les colonnes quantitatives
vars_quantitatives <- sapply(poules, is.numeric)
# Créer un boxplot pour chaque variable quantitative
for (var in names(poules)[vars_quantitatives]) {
print(ggplot(poules, aes_string(x = factor(1), y = var)) +
geom_boxplot(fill = "skyblue", color = "darkblue") +
theme_minimal() +
labs(title = paste("Boxplot de", var), x = "", y = var))
}
library(ggplot2)
# Identifier les colonnes quantitatives
vars_quantitatives <- sapply(poules, is.numeric)
# Créer un boxplot pour chaque variable quantitative
for (var in names(poules)) {
print(ggplot(poules, aes_string(x = factor(1), y = var)) +
geom_boxplot(fill = "skyblue", color = "darkblue") +
theme_minimal() +
labs(title = paste("Boxplot de", var), x = "", y = var))
}
library(ggplot2)
# Identifier les colonnes quantitatives
vars_quantitatives <- sapply(poules, is.numeric)
poules$genotype=factor(poules$genotype)
poules$Temperature=factor(poules$Temperature)
# Créer un boxplot pour chaque variable quantitative
for (var in names(poules)) {
print(ggplot(poules, aes_string(x = factor(1), y = var)) +
geom_boxplot(fill = "skyblue", color = "darkblue") +
theme_minimal() +
labs(title = paste("Boxplot de", var), x = "", y = var))
}
library(ggplot2)
# Identifier les colonnes quantitatives
vars_quantitatives <- sapply(poules, is.numeric)
poules$genotype=factor(poules$genotype)
poules$Temperature=factor(poules$Temperature)
# Créer un boxplot pour chaque variable quantitative
for (var in names(poules)) {
print(ggplot(poules, aes_string(x = factor(1), y = var)) +
geom_boxplot(fill = "skyblue", color = "darkblue") +
theme_minimal() +
labs(title = paste("Boxplot de", var), x = "", y = var))
}
library(ggplot2)
# Identifier les colonnes quantitatives
# Créer un histogramme pour chaque variable quantitative
for (var in names(poules)) {
print(ggplot(poules, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
theme_minimal() +
labs(title = paste("Histogramme de", var), x = var, y = "Fréquence"))
}
# Chargement des données
poules <- read.table(file = "poules.txt", header = T)
library(ggplot2)
# Identifier les colonnes quantitatives
# Créer un histogramme pour chaque variable quantitative
for (var in names(poules)) {
print(ggplot(poules, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
theme_minimal() +
labs(title = paste("Histogramme de", var), x = var, y = "Fréquence"))
}
library(ggplot2)
# Identifier les colonnes quantitatives
vars_quantitatives <- sapply(poules, is.numeric)
# Créer un histogramme pour chaque variable quantitative
for (var in names(poules)[vars_quantitatives]) {
print(ggplot(poules, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
theme_minimal() +
labs(title = paste("Histogramme de", var), x = var, y = "Fréquence"))
}
# Fonction pour créer un barplot en proportions
creer_barplot_proportion <- function(data, column_name) {
# Calculer les proportions
proportions <- data %>%
count(.data[[column_name]]) %>%
mutate(Proportion = n / sum(n))
# Créer le barplot
ggplot(proportions, aes_string(x = column_name, y = "Proportion", fill = column_name)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::percent_format()) +
labs(x = column_name, y = "Proportion (%)") +
theme_minimal()
}
# Créer un barplot pour la variable "genetype"
creer_barplot_proportion(poules, "genotype")
library(ggplot2)
# Fonction pour créer un barplot en proportions
creer_barplot_proportion <- function(data, column_name) {
# Calculer les proportions
proportions <- data %>%
count(.data[[column_name]]) %>%
mutate(Proportion = n / sum(n))
# Créer le barplot
ggplot(proportions, aes_string(x = column_name, y = "Proportion", fill = column_name)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::percent_format()) +
labs(x = column_name, y = "Proportion (%)") +
theme_minimal()
}
# Créer un barplot pour la variable "genetype"
creer_barplot_proportion(poules, "genotype")
library(ggplot2)
library(ggplot2)
# Fonction pour créer un barplot en proportions
creer_barplot_proportion <- function(data, column_name) {
# Calculer les proportions
proportions <- data %>%
count(.data[[column_name]]) %>%
mutate(Proportion = n / sum(n))
# Créer le barplot
ggplot(proportions, aes_string(x = column_name, y = "Proportion", fill = column_name)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::percent_format()) +
labs(x = column_name, y = "Proportion (%)") +
theme_minimal()
}
# Créer un barplot pour la variable "genetype"
creer_barplot_proportion(poules, "genotype")
barplot(poules$genotype)
library(ggplot2)
# Identifier les colonnes quantitatives
vars_quantitatives <- sapply(poules, is.numeric)
# Créer un histogramme pour chaque variable quantitative
for (var in names(poules)[vars_quantitatives]) {
print(ggplot(poules, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
theme_minimal() +
labs(title = paste("Histogramme de", var), x = var, y = "Fréquence"))
}
library(ggplot2)
# Identifier les colonnes quantitatives
vars_quantitatives <- sapply(poules[,2], is.numeric)
# Créer un histogramme pour chaque variable quantitative
for (var in names(poules)[vars_quantitatives]) {
print(ggplot(poules, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
theme_minimal() +
labs(title = paste("Histogramme de", var), x = var, y = "Fréquence"))
}
library(ggplot2)
# Identifier les colonnes quantitatives
vars_quantitatives <- sapply(poules[,2], is.numeric)
# Créer un histogramme pour chaque variable quantitative
for (var in names(poules)[vars_quantitatives]) {
print(ggplot(poules, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
theme_minimal() +
labs(title = paste("Histogramme de", var), x = var, y = "Fréquence"))
}
library(ggplot2)
# Identifier les colonnes quantitatives
vars_quantitatives <- sapply(poules[,2], is.numeric)
# Créer un histogramme pour chaque variable quantitative
for (var in names(poules)[vars_quantitatives]) {
print(ggplot(poules, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
theme_minimal() +
labs(title = paste("Histogramme de", var), x = var, y = "Fréquence"))
}
library(ggplot2)
# Identifier les colonnes quantitatives
vars_quantitatives <- sapply(poules[,2], is.numeric)
# Créer un histogramme pour chaque variable quantitative
for (var in names(poules)[vars_quantitatives]) {
print(ggplot(poules, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
theme_minimal() +
labs(title = paste("Histogramme de", var), x = var, y = "Fréquence"))
}
# Chargement des données
poules <- read.table(file = "poules.txt", header = T)
# Afficher les premières ligne du jeu de données
head(poules)
#| echo: true
# Afficher les informatons sur les variables
str(poules)
# résumé du jeu de données
summary(poules)
# Fonction pour calculer la proportion de valeurs manquantes par variable
proportion_valeurs_manquantes <- function(data) {
# Calcul du nombre de valeurs manquantes par colonne
nb_valeurs_manquantes <- sapply(data, function(x) sum(is.na(x)))
# Calcul de la proportion de valeurs manquantes
proportion_manquantes <- nb_valeurs_manquantes / nrow(data)
# Création d'un dataframe pour le résultat
resultat <- data.frame(Nombre = nb_valeurs_manquantes, Proportion = proportion_manquantes)
return(resultat)
}
# Utilisation de la fonction avec la base de données
resultat <- proportion_valeurs_manquantes(poules)
# Affichage du résultat
resultat
library(ggplot2)
# Identifier les colonnes quantitatives
vars_quantitatives <- sapply(poules[,2], is.numeric)
# Créer un histogramme pour chaque variable quantitative
for (var in names(poules)[vars_quantitatives]) {
print(ggplot(poules, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
theme_minimal() +
labs(title = paste("Histogramme de", var), x = var, y = "Fréquence"))
}
library(ggplot2)
# Identifier les colonnes quantitatives
vars_quantitatives <- sapply(poules, is.numeric)
# Créer un histogramme pour chaque variable quantitative
for (var in names(poules)[vars_quantitatives]) {
print(ggplot(poules, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
theme_minimal() +
labs(title = paste("Histogramme de", var), x = var, y = "Fréquence"))
}
# Charger les packages
library(ggplot2)
library(corrplot)
# Calculer la matrice de corrélation
matrice_correlation <- cor(poules, use = "complete.obs")
# Charger les packages
library(ggplot2)
library(corrplot)
donnees_quantitatives <- poules[, vars_quantitatives]
# Calculer la matrice de corrélation
matrice_correlation <- cor(donnees_quantitatives, use = "complete.obs")
# Créer la heatmap de corrélation avec des coefficients plus visibles
corrplot(matrice_correlation, method = "color", type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45,
addCoef.col = "black", # Couleur des coefficients
cl.pos = "n", # Position de la légende de couleur
cl.cex = 1.2, # Taille de la légende de couleur
addCoefasPercent = TRUE, # Afficher les coefficients en pourcentage
number.cex = 0.8) # Taille des chiffres des coefficients
barplot(table(poules$genotype))
barplot(table(poules$Temperature))
# Charger les packages
library(ggplot2)
library(corrplot)
donnees_quantitatives <- poules[, vars_quantitatives]
# Calculer la matrice de corrélation
matrice_correlation <- cor(donnees_quantitatives, use = "complete.obs")
# Créer la heatmap de corrélation avec des coefficients plus visibles
corrplot(matrice_correlation, method = "color", type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45,
addCoef.col = "black", # Couleur des coefficients
cl.pos = "n", # Position de la légende de couleur
cl.cex = 1.2, # Taille de la légende de couleur
addCoefasPercent = TRUE, # Afficher les coefficients en pourcentage
number.cex = 0.8) # Taille des chiffres des coefficients
print(matrice_correlation)
# Charger les packages
library(ggplot2)
library(corrplot)
donnees_quantitatives <- poules[, vars_quantitatives]
# Calculer la matrice de corrélation
matrice_correlation <- cor(donnees_quantitatives, use = "complete.obs")
# Créer la heatmap de corrélation avec des coefficients plus visibles
corrplot(matrice_correlation, method = "color", type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45,
addCoef.col = "black", # Couleur des coefficients
cl.pos = "n", # Position de la légende de couleur
cl.cex = 1.2, # Taille de la légende de couleur
addCoefasPercent = TRUE, # Afficher les coefficients en pourcentage
number.cex = 0.8) # Taille des chiffres des coefficients
library(ggplot2)
# Identifier les colonnes quantitatives
vars_quantitatives <- sapply(poules, is.numeric)
# Créer un histogramme pour chaque variable quantitative
for (var in names(poules)[vars_quantitatives]) {
print(ggplot(poules, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
theme_minimal() +
labs(title = paste("Histogramme de", var), x = var, y = "Fréquence"))
}
# Sous-ensemble des données pour inclure uniquement les variables incluses dans le modèle
donnees_modele <- poules[, c("pav_ab", "p_ga", "p_coeur", "p_foie", "p_sang", "p_plum")]
# Représentation par paire
pairs(donnees_modele)
modele_lm <- lm(pav_ab ~ p_ga + p_coeur + p_foie + p_sang + p_plum, data = poules)
summary(modele_lm)
#nullité de l'espérance des erreurs?
moyenne_esperance <- mean(residuals(modele_lm))
moyenne_esperance
#
library(lmtest)
install.packages("zoo")
library(lmtest)
install.packages("zoo")
#nullité de l'espérance des erreurs? réponse OUi
moyenne_esperance <- mean(residuals(modele_lm))
moyenne_esperance
#Absence d'autocorrélation
install.packages("zoo")
library(lmtest)
durbin_test <- dwtest(modele_lm)
durbin_test
# Homocédasticité
library(ggplot2)
# Calcul des résidus
residus <- residuals(modele_lm)
# Création du data frame pour ggplot
data <- data.frame(Prediction = predict(modele_lm), Residus = residus)
# Création du graphique avec ggplot
ggplot(data, aes(x = Prediction, y = Residus)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Homoscédasticité des résidus",
x = "Valeurs prédites",
y = "Résidus")
# Normalité?
# Création du data frame pour ggplot
data <- data.frame(Residus = residus)
# Création du graphique avec ggplot
ggplot(data, aes(sample = Residus)) +
stat_qq() +
stat_qq_line() +
labs(title = "QQ plot des résidus",
x = "Quantiles théoriques",
y = "Quantiles observés")
library(ggplot2)
# Identifier les colonnes quantitatives
vars_quantitatives <- sapply(poules, is.numeric)
# Exclure les variables id et Temperature
vars_exclues <- c("id", "Temperature")
# Créer un histogramme pour chaque variable quantitative
for (var in names(poules)[vars_quantitatives]) {
if (!(var %in% vars_exclues)) {
print(ggplot(poules, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
theme_minimal() +
labs(title = paste("Histogramme de", var), x = var, y = "Fréquence"))
}
}
library(ggplot2)
library(gridExtra)
# Identifier les colonnes quantitatives
vars_quantitatives <- sapply(poules, is.numeric)
# Exclure les variables id et Temperature
vars_exclues <- c("id", "Temperature")
# Initialiser une liste pour stocker les graphiques
plots <- list()
# Créer un histogramme pour chaque variable quantitative
for (var in names(poules)[vars_quantitatives]) {
if (!(var %in% vars_exclues)) {
p <- ggplot(poules, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
theme_minimal() +
labs(title = paste("Histogramme de", var), x = var, y = "Fréquence")
plots[[var]] <- p
}
}
# Afficher les graphiques côte à côte
grid.arrange(grobs = plots, ncol = 2)
tenueA=c(14.34, 13.95, 12.51)
tenueB=c(15.66 ,16.62, 14.85)
var.test(tenueA,tenueB)
t.test(tenueA,tenueB)
A = matrix(c(2,-1,-1,2), ncol=2,byrow = T)
A
eigen(A)
install.packages("Factoshiny")
install.packages("Factoshiny")
library(Factoshiny)
decathlon_data <- read.table("decathlon.txt", header = TRUE, sep = "\t")
summary(decathlon_data)
head(decathlon_data)
summary(decathlon_data)
head(decathlon_data)
# Renommer les colonnes avec des noms de compétitions sportives en français
colnames(decathlon_data) <-  c(
"Course100m",     # X100m
"SautEnLongueur", # Long.jump
"LancerDePoids",  # Shot.put
"SautEnHauteur",  # High.jump
"Course400m",     # X400m
"Course110mHaies",# X110m.hurdle
"LancerDeDisque", # Discus
"SautALaPerche",  # Pole.vault
"LancerDeJavelot",# Javeline
"Course1500m",    # X1500m
"Classement",     # Rank
"Points",         # Points
"Compétition"     # Competition
)
head(decathlon_data)
summary(decathlon_data)
res <- Factoshiny(decathlon_data)
velib <- read.table(file = "velib5ours.txt", header = T)
velib <- read.table(file = "velib5jours.txt", header = T)
velib <- read.table(file = "velib5jours.txt")
data(velib5jours.txt)
velib <- read.table(file = "velib5jours.txt", sep = " ")
velib <- read.table(file = "velib5jours.txt", sep = " ")
data <- read.csv("velib5jours.txt", sep = " ")
View(data)
summary(data)
dim(data)
nrow(data)
ncol(data)
str(data)
# Fonction pour calculer la proportion de valeurs manquantes par variable
proportion_valeurs_manquantes <- function(data) {
# Calcul du nombre de valeurs manquantes par colonne
nb_valeurs_manquantes <- sapply(data, function(x) sum(is.na(x)))
# Calcul de la proportion de valeurs manquantes
proportion_manquantes <- nb_valeurs_manquantes / nrow(data)
# Création d'un dataframe pour le résultat
resultat <- data.frame(Nombre = nb_valeurs_manquantes, Proportion = proportion_manquantes)
return(resultat)
}
# Utilisation de la fonction avec votre base de données
resultat <- proportion_valeurs_manquantes(data)
# Affichage du résultat
resultat
# Charger les packages
library(ggplot2)
# Identifier les colonnes quantitatives
vars_quantitatives <- sapply(data, is.numeric)
# Créer un histogramme pour chaque variable quantitative
for (var in names(data)[vars_quantitatives]) {
print(ggplot(data, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
theme_minimal() +
labs(title = paste("Histogramme de", var), x = var, y = "Fréquence"))
}
# Charger les packages
library(ggplot2)
# Identifier les colonnes quantitatives
vars_quantitatives <- sapply(data, is.numeric)
# Créer un histogramme pour chaque variable quantitative
for (var in names(data)[vars_quantitatives]) {
print(ggplot(data, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
theme_minimal() +
labs(title = paste("Histogramme de", var), x = var, y = "Fréquence"))
}
# Fonction pour créer un barplot en proportions
creer_barplot_proportion <- function(data, column_name) {
# Calculer les proportions
proportions <- data %>%
count(.data[[column_name]]) %>%
mutate(Proportion = n / sum(n))
# Créer le barplot
ggplot(proportions, aes_string(x = column_name, y = "Proportion", fill = column_name)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::percent_format()) +
labs(x = column_name, y = "Proportion (%)") +
theme_minimal()
}
creer_barplot_proportion(data, "noms")
barplot(table(data, "noms"))
barplot(table(data$noms))
library(Factoshiny)
res <- Factoshiny(data)
data <- read.csv("velib5jours.txt", sep = " ")
library(Factoshiny)
res <- Factoshiny(data)
data <- read.csv("velib5jours.txt", sep = " ")
# Charger les packages
library(ggplot2)
library(FactoMineR)
library(factoextra)
# Identifier les colonnes quantitatives
vars_quantitatives <- sapply(data, is.numeric)
donnees_quantitatives <- data[, vars_quantitatives]
donnees_centrees_reduites <- scale(donnees_quantitatives,center = TRUE,scale=TRUE)
res_acp <- PCA(donnees_centrees_reduites, graph = F)
res_acp
# Créer le graphique du cercle de corrélation
fviz_pca_var(res_acp,
col.var = "cos2", # Utiliser la qualité de représentation (cos2) pour la couleur
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), # Palette de couleurs
repel = TRUE, # Éviter le chevauchement des étiquettes
title = "Cercle de Corrélation des Variables")
# Créer le graphique du cercle de corrélation
fviz_pca_var(res_acp)
library(Factoshiny)
res <- Factoshiny(data)
